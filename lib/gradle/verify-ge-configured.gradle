import org.gradle.util.GradleVersion

initscript {
    def gradleEnterprisePluginVersion = "3.6.1"
    def commonCustomUserDataPluginVersion = "1.2.1"

    repositories {
        gradlePluginPortal()
    }

    dependencies {
        classpath("com.gradle:gradle-enterprise-gradle-plugin:${gradleEnterprisePluginVersion}")
        classpath("com.gradle:common-custom-user-data-gradle-plugin:${commonCustomUserDataPluginVersion}")
    }
}

def isTopLevelBuild = gradle.getParent() == null

if (isTopLevelBuild) {
    def version = GradleVersion.current().baseVersion
    def atLeastGradle5 = version >= GradleVersion.version("5.0")
    def atLeastGradle6 = version >= GradleVersion.version("6.0")

    clearWarnings()

    if (atLeastGradle6) {
       settingsEvaluated { settings ->
            if (!settings.pluginManager.hasPlugin("com.gradle.enterprise")) {
                 throw new GradleException("The Gradle Enterprise plugin is missing from the project (see https://docs.gradle.com/enterprise/gradle-plugin/#gradle_6_x_and_later).")
            }
            if (!settings.pluginManager.hasPlugin("com.gradle.common-custom-user-data-gradle-plugin")) {
                 logMissingCommonCustomUserMetadataPlugin()
            }
            configureGradleEnterprise(settings.extensions["gradleEnterprise"])
        }
    } else if (atLeastGradle5) {
        projectsEvaluated { gradle ->
            def rootProject = gradle.rootProject

            if (!rootProject.pluginManager.hasPlugin("com.gradle.build-scan")) {
                 throw new GradleException("The Gradle Enterprise (Build Scan) plugin is missing from the project (see https://docs.gradle.com/enterprise/gradle-plugin/#gradle_5_x).")
            }
            if (!rootProject.pluginManager.hasPlugin("com.gradle.common-custom-user-data-gradle-plugin")) {
                 logMissingCommonCustomUserMetadataPlugin()
            }

            configureGradleEnterprise(rootProject.extensions["gradleEnterprise"])
        }
    }
}

void configureGradleEnterprise(extension) {
    extension.with {
         def projectProperties = gradle.startParameter.projectProperties
         if (projectProperties.containsKey("com.gradle.enterprise.init.script.server")) {
             server = projectProperties.get("com.gradle.enterprise.init.script.server")
         }

         if (server == null || server.isEmpty())
              throw new GradleException("A Gradle Enterprise server URL has not been configured.", null)

         buildScan {
             uploadInBackground = false
             publishAlways()
         }
    }
}

void clearWarnings() {
    new File(gradle.startParameter.currentDir, "../warnings.txt").delete()
}

void logMissingCommonCustomUserMetadataPlugin() {
     logWarning("The Common Custom User Data Gradle Plugin has not been applied. The Common Custom User Data plugin attaches common metadata to the build scans (see https://github.com/gradle/gradle-enterprise-build-config-samples/tree/master/common-custom-user-data-gradle-plugin).")
}

void logWarning(String warning) {
   def warningFile = new File(gradle.startParameter.currentDir, "../warnings.txt")
   warningFile.append(warning + "\n")
}
