import org.gradle.util.GradleVersion

def isTopLevelBuild = gradle.getParent() == null
if (isTopLevelBuild) {
    def version = GradleVersion.current().baseVersion
    def atLeastGradle5 = version >= GradleVersion.version("5.0")
    def atLeastGradle6 = version >= GradleVersion.version("6.0")

    if (atLeastGradle6) {
        settingsEvaluated { settings ->
            if (!settings.pluginManager.hasPlugin("com.gradle.enterprise")) {
                throw new IllegalStateException("The com.gradle.enterprise plugin is missing from the project (see https://docs.gradle.com/enterprise/gradle-plugin/#gradle_6_x_and_later).")
            }
            registerCallbacks(settings.extensions["gradleEnterprise"])
        }
    } else if (atLeastGradle5) {
        projectsEvaluated { gradle ->
            if (!gradle.rootProject.pluginManager.hasPlugin("com.gradle.build-scan")) {
                throw new IllegalStateException("The com.gradle.build-scan plugin is missing from the project (see https://docs.gradle.com/enterprise/gradle-plugin/#gradle_5_x).")
            }
            registerCallbacks(gradle.rootProject.extensions["gradleEnterprise"])
        }
    } else {
        throw new IllegalStateException("Build validation not supported for Gradle ${GradleVersion.current()}. Upgrade your project's build to Gradle 5 or newer.")
    }
} else {
    throw new IllegalStateException("Build validation only supported on top-level Gradle build.")
}

def registerCallbacks(gradleEnterprise) {
    gradleEnterprise.with {
        buildScan {
            buildScanPublished { scan -> logScan(scan) }
            onError { error -> reportFailedToPublishBuildScan(error) }
        }
    }
}

def logScan(scan) {
    def port = (scan.buildScanUri.port != -1) ? ":" + scan.buildScanUri.port : ""
    def baseUrl = "${scan.buildScanUri.scheme}://${scan.buildScanUri.host}${port}"

    def scanFile = new File(experimentDir, "scans.csv")
    scanFile.append("${baseUrl},${scan.buildScanUri},${scan.buildScanId}\n")
}

def reportFailedToPublishBuildScan(error) {
    def errorFile = new File(experimentDir, "build-scan-publish-error.txt")
    errorFile.text = error
}

File getExperimentDir() {
    def projectProperties = gradle.startParameter.projectProperties
    new File(projectProperties.get("com.gradle.enterprise.init.script.experimentDir"))
}
