import org.gradle.util.GradleVersion

initscript {
    def pluginVersion = "3.6"

    repositories {
        gradlePluginPortal()
    }

    dependencies {
        classpath("com.gradle:gradle-enterprise-gradle-plugin:${pluginVersion}")
    }
}

def isTopLevelBuild = gradle.getParent() == null

if (isTopLevelBuild) {
    def version = GradleVersion.current().baseVersion
    def atLeastGradle5 = version >= GradleVersion.version("5.0")
    def atLeastGradle6 = version >= GradleVersion.version("6.0")
    def projectProperties = gradle.startParameter.projectProperties
    def experimentDir = new File(projectProperties.get("com.gradle.enterprise.init.script.experimentDir"))

    if (atLeastGradle6) {
        settingsEvaluated { settings ->
            def rootDir = settings.rootDir
            registerCallbacks(settings.extensions["gradleEnterprise"], experimentDir)
        }
    } else if (atLeastGradle5) {
        projectsEvaluated { gradle ->
            def rootDir = gradle.settings.rootDir
            registerCallbacks(gradle.rootProject.extensions["gradleEnterprise"], experimentDir)
        }
    }
}

def registerCallbacks(gradleEnterprise, rootDir) {
    gradleEnterprise.with {
        buildScan {
            buildScanPublished { scan -> logScan(rootDir, scan) }
            onError { error -> reportFailedToPublishBuildScan(rootDir, error)  }
        }
    }
}

def logScan(rootDir, scan) {
    def port = (scan.buildScanUri.port != -1) ? ":" + scan.buildScanUri.port : ""
    def baseUrl = "${scan.buildScanUri.scheme}://${scan.buildScanUri.host}${port}"

    def scanFile = new File(rootDir, "scans.csv")
    scanFile.append("${baseUrl},${scan.buildScanId},${scan.buildScanUri}\n")
}

def reportFailedToPublishBuildScan(rootDir, error) {
    def errorFile = new File(rootDir, "build-scan-publish-error.txt")
    errorFile.text = error
}

