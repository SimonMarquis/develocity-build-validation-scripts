package com.gradle.enterprise.cli;

import com.gradle.enterprise.api.model.*;
import com.gradle.enterprise.loader.BuildScanDataLoader;
import com.gradle.enterprise.model.BuildScanData;
import com.gradle.enterprise.model.CustomValueNames;
import com.gradle.enterprise.model.NumberedBuildScan;
import com.gradle.enterprise.model.TaskExecutionSummary;

import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static com.gradle.enterprise.api.model.GradleBuildCachePerformanceTaskExecutionEntry.AvoidanceOutcomeEnum.EXECUTED_CACHEABLE;
import static com.gradle.enterprise.api.model.GradleBuildCachePerformanceTaskExecutionEntry.AvoidanceOutcomeEnum.EXECUTED_NOT_CACHEABLE;
import static com.gradle.enterprise.api.model.GradleBuildCachePerformanceTaskExecutionEntry.NonCacheabilityCategoryEnum.DISABLED_TO_ENSURE_CORRECTNESS;
import static com.gradle.enterprise.api.model.GradleBuildCachePerformanceTaskExecutionEntry.NonCacheabilityCategoryEnum.OVERLAPPING_OUTPUTS;
import static com.gradle.enterprise.loader.BuildScanDataLoader.BuildToolType;
import static com.gradle.enterprise.loader.BuildScanDataLoader.BuildToolType.*;

public final class BuildScanDataAnalyzer {

    private final CustomValueNames customValueNames;
    private final BuildScanDataLoader buildScanDataLoader;

    public BuildScanDataAnalyzer(CustomValueNames customValueNames, BuildScanDataLoader buildScanDataLoader) {
        this.customValueNames = customValueNames;
        this.buildScanDataLoader = buildScanDataLoader;
    }

    public BuildScanData analyzeBuildScanData(NumberedBuildScan buildScan) {
        int runNum = buildScan.runNum;
        BuildToolType buildToolType = buildScanDataLoader.determineBuildToolType(buildScan.resource);
        if (buildToolType.equals(GRADLE)) {
            return analyzeGradleBuild(runNum, buildScanDataLoader.loadDataForGradle(buildScan.resource));
        } else if (buildToolType.equals(MAVEN)) {
            return analyzeMavenBuild(runNum, buildScanDataLoader.loadDataForMaven(buildScan.resource));
        } else {
            throw new RuntimeException(String.format("Build Scan %s was generated by an unknown build agent: %s.", buildScan.resource, buildToolType));
        }
    }

    private BuildScanData analyzeGradleBuild(int runNum, BuildScanDataLoader.BuildScanData<GradleAttributes, GradleBuildCachePerformance> result) {
        GradleAttributes attributes = result.attributes;
        GradleBuildCachePerformance performance = result.buildCachePerformance;

        return new BuildScanData(
                runNum,
                attributes.getRootProjectName(),
                attributes.getId(),
                result.gradleEnterpriseServerURL().orElse(null),
                findCustomValue(customValueNames.getGitRepositoryKey(), attributes.getValues()),
                findCustomValue(customValueNames.getGitBranchKey(), attributes.getValues()),
                findCustomValue(customValueNames.getGitCommitIdKey(), attributes.getValues()),
                attributes.getRequestedTasks(),
                buildOutcomeFrom(attributes),
                remoteBuildCacheUrlFrom(performance),
                summarizeTaskExecutions(performance),
                buildTimeFrom(performance),
                serializationFactorFrom(performance)
        );
    }

    private BuildScanData analyzeMavenBuild(int runNum, BuildScanDataLoader.BuildScanData<MavenAttributes, MavenBuildCachePerformance> result) {
        MavenAttributes attributes = result.attributes;
        MavenBuildCachePerformance performance = result.buildCachePerformance;
        return new BuildScanData(
                runNum,
                attributes.getTopLevelProjectName(),
                attributes.getId(),
                result.gradleEnterpriseServerURL().orElse(null),
                findCustomValue(customValueNames.getGitRepositoryKey(), attributes.getValues()),
                findCustomValue(customValueNames.getGitBranchKey(), attributes.getValues()),
                findCustomValue(customValueNames.getGitCommitIdKey(), attributes.getValues()),
                attributes.getRequestedGoals(),
                buildOutcomeFrom(attributes),
                remoteBuildCacheUrlFrom(performance),
                summarizeTaskExecutions(performance),
                buildTimeFrom(performance),
                serializationFactorFrom(performance)
        );
    }

    private static String findCustomValue(String key, List<BuildAttributesValue> values) {
        return values.stream()
                .filter(v -> v.getName().equals(key))
                .map(v -> {
                    if (v.getValue() == null) {
                        return "";
                    }
                    return v.getValue();
                })
                .findFirst()
                .orElse("");
    }

    private static String buildOutcomeFrom(GradleAttributes attributes) {
        if (!attributes.getHasFailed()) {
            return "SUCCESS";
        }
        return "FAILED";
    }

    private static String buildOutcomeFrom(MavenAttributes attributes) {
        if (!attributes.getHasFailed()) {
            return "SUCCESS";
        }
        return "FAILED";
    }

    private static URL remoteBuildCacheUrlFrom(GradleBuildCachePerformance buildCachePerformance) {
        if (buildCachePerformance.getBuildCaches() == null ||
                buildCachePerformance.getBuildCaches().getRemote().getUrl() == null) {
            return null;
        }

        try {
            return new URL(buildCachePerformance.getBuildCaches().getRemote().getUrl());
        } catch (MalformedURLException e) {
            // Don't do anything on purpose.
            return null;
        }
    }

    private static URL remoteBuildCacheUrlFrom(MavenBuildCachePerformance buildCachePerformance) {
        if (buildCachePerformance.getBuildCaches() == null ||
                buildCachePerformance.getBuildCaches().getRemote() == null ||
                buildCachePerformance.getBuildCaches().getRemote().getUrl() == null) {
            return null;
        }

        try {
            return new URL(buildCachePerformance.getBuildCaches().getRemote().getUrl());
        } catch (MalformedURLException e) {
            // Don't do anything on purpose.
            return null;
        }
    }

    private static Map<String, TaskExecutionSummary> summarizeTaskExecutions(GradleBuildCachePerformance buildCachePerformance) {
        Map<String, List<GradleBuildCachePerformanceTaskExecutionEntry>> tasksByOutcome = buildCachePerformance.getTaskExecution().stream()
                .collect(Collectors.groupingBy(BuildScanDataAnalyzer::avoidanceOutcome));

        Map<String, TaskExecutionSummary> summariesByOutcome = tasksByOutcome.entrySet()
                .stream()
                .map(BuildScanDataAnalyzer::summarizeForGradle)
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));

        Arrays.stream(GradleBuildCachePerformanceTaskExecutionEntry.AvoidanceOutcomeEnum.values())
                .forEach(outcome -> summariesByOutcome.putIfAbsent(outcome.toString(), TaskExecutionSummary.ZERO));

        return toTotalAvoidedFromCache(summariesByOutcome);
    }

    private static String avoidanceOutcome(GradleBuildCachePerformanceTaskExecutionEntry task) {
        GradleBuildCachePerformanceTaskExecutionEntry.AvoidanceOutcomeEnum avoidanceOutcome = task.getAvoidanceOutcome();
        GradleBuildCachePerformanceTaskExecutionEntry.NonCacheabilityCategoryEnum nonCacheabilityCategory = task.getNonCacheabilityCategory();
        if (avoidanceOutcome == EXECUTED_NOT_CACHEABLE && (nonCacheabilityCategory == OVERLAPPING_OUTPUTS || nonCacheabilityCategory == DISABLED_TO_ENSURE_CORRECTNESS)) {
            return EXECUTED_CACHEABLE.toString();
        }
        return avoidanceOutcome.toString();
    }

    private static Map<String, TaskExecutionSummary> summarizeTaskExecutions(MavenBuildCachePerformance buildCachePerformance) {
        Map<String, List<MavenBuildCachePerformanceGoalExecutionEntry>> tasksByOutcome = buildCachePerformance.getGoalExecution().stream()
                .collect(Collectors.groupingBy(
                        t -> t.getAvoidanceOutcome().toString()
                ));

        Map<String, TaskExecutionSummary> summariesByOutcome = tasksByOutcome.entrySet()
                .stream()
                .map(BuildScanDataAnalyzer::summarizeForMaven)
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));

        Arrays.stream(MavenBuildCachePerformanceGoalExecutionEntry.AvoidanceOutcomeEnum.values())
                .forEach(outcome -> summariesByOutcome.putIfAbsent(outcome.toString(), TaskExecutionSummary.ZERO));

        return toTotalAvoidedFromCache(summariesByOutcome);
    }

    private static Map.Entry<String, TaskExecutionSummary> summarizeForGradle(Map.Entry<String, List<GradleBuildCachePerformanceTaskExecutionEntry>> entry) {
        return new AbstractMap.SimpleEntry<>(entry.getKey(), summarizeForGradle(entry.getValue()));
    }

    private static TaskExecutionSummary summarizeForGradle(List<GradleBuildCachePerformanceTaskExecutionEntry> tasks) {
        return tasks.stream()
                .reduce(TaskExecutionSummary.ZERO, (summary, task) ->
                                new TaskExecutionSummary(
                                        summary.totalTasks() + 1,
                                        summary.totalDuration().plus(toDuration(task.getDuration())),
                                        summary.totalAvoidanceSavings().plus(toDuration(task.getAvoidanceSavings()))),
                        TaskExecutionSummary::plus
                );
    }

    private static Map.Entry<String, TaskExecutionSummary> summarizeForMaven(Map.Entry<String, List<MavenBuildCachePerformanceGoalExecutionEntry>> entry) {
        return new AbstractMap.SimpleEntry<>(entry.getKey(), summarizeForMaven(entry.getValue()));
    }

    private static TaskExecutionSummary summarizeForMaven(List<MavenBuildCachePerformanceGoalExecutionEntry> tasks) {
        return tasks.stream()
                .reduce(TaskExecutionSummary.ZERO, (summary, task) ->
                                new TaskExecutionSummary(
                                        summary.totalTasks() + 1,
                                        summary.totalDuration().plus(toDuration(task.getDuration())),
                                        summary.totalAvoidanceSavings().plus(toDuration(task.getAvoidanceSavings()))),
                        TaskExecutionSummary::plus
                );
    }

    private static Duration toDuration(Long millis) {
        if (millis == null) {
            return Duration.ZERO;
        }
        return Duration.ofMillis(millis);
    }

    private static Map<String, TaskExecutionSummary> toTotalAvoidedFromCache(Map<String, TaskExecutionSummary> summariesByOutcome) {
        TaskExecutionSummary fromLocalCache = summariesByOutcome.getOrDefault("avoided_from_local_cache", TaskExecutionSummary.ZERO);
        TaskExecutionSummary fromRemoteCache = summariesByOutcome.getOrDefault("avoided_from_remote_cache", TaskExecutionSummary.ZERO);

        summariesByOutcome.put("avoided_from_cache", fromLocalCache.plus(fromRemoteCache));
        return summariesByOutcome;
    }

    private static Duration buildTimeFrom(GradleBuildCachePerformance buildCachePerformance) {
        return toDuration(buildCachePerformance.getBuildTime());
    }

    private static Duration buildTimeFrom(MavenBuildCachePerformance buildCachePerformance) {
        return toDuration(buildCachePerformance.getBuildTime());
    }

    private static BigDecimal serializationFactorFrom(GradleBuildCachePerformance buildCachePerformance) {
        return BigDecimal.valueOf(buildCachePerformance.getSerializationFactor());
    }

    private static BigDecimal serializationFactorFrom(MavenBuildCachePerformance buildCachePerformance) {
        return BigDecimal.valueOf(buildCachePerformance.getSerializationFactor());
    }

}
